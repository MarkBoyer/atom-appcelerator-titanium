{
  "_args": [
    [
      {
        "raw": "/private/var/folders/4d/spt7gb_56hd2vlsdpnm0q6drjq6v8x/T/d-11844-9193-ce7hi5.c99ymk7qfr/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/4d/spt7gb_56hd2vlsdpnm0q6drjq6v8x/T/d-11844-9193-ce7hi5.c99ymk7qfr/package.tgz",
        "spec": "/private/var/folders/4d/spt7gb_56hd2vlsdpnm0q6drjq6v8x/T/d-11844-9193-ce7hi5.c99ymk7qfr/package.tgz",
        "type": "local"
      },
      "/private/var/folders/4d/spt7gb_56hd2vlsdpnm0q6drjq6v8x/T/apm-install-dir-11844-9193-1x3yo47.p2bcjfko6r"
    ]
  ],
  "_from": "../d-11844-9193-ce7hi5.c99ymk7qfr/package.tgz",
  "_id": "appcelerator-titanium@1.1.1",
  "_inCache": true,
  "_location": "/appcelerator-titanium",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/4d/spt7gb_56hd2vlsdpnm0q6drjq6v8x/T/d-11844-9193-ce7hi5.c99ymk7qfr/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/4d/spt7gb_56hd2vlsdpnm0q6drjq6v8x/T/d-11844-9193-ce7hi5.c99ymk7qfr/package.tgz",
    "spec": "/private/var/folders/4d/spt7gb_56hd2vlsdpnm0q6drjq6v8x/T/d-11844-9193-ce7hi5.c99ymk7qfr/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-11844-9193-ce7hi5.c99ymk7qfr/package.tgz",
  "_shasum": "33c61a21984e3b940bf26329aead6f83f412190f",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/4d/spt7gb_56hd2vlsdpnm0q6drjq6v8x/T/d-11844-9193-ce7hi5.c99ymk7qfr/package.tgz",
  "_where": "/private/var/folders/4d/spt7gb_56hd2vlsdpnm0q6drjq6v8x/T/apm-install-dir-11844-9193-1x3yo47.p2bcjfko6r",
  "bugs": {
    "url": "https://github.com/appcelerator/atom-appcelerator-titanium/issues"
  },
  "dependencies": {
    "etch": "^0.12.6",
    "find": "^0.2.4",
    "mkdirp": "^0.5.1",
    "suppose": "^0.6.2",
    "underscore": "1.8.x",
    "xml2js": "^0.4.17"
  },
  "description": "Axway Appcelerator Titanium build tools and UI for Atom",
  "devDependencies": {
    "eslint": "^4.11.0",
    "eslint-config-axway": "^2.0.7",
    "eslint-plugin-jsx-a11y": "^6.0.2",
    "eslint-plugin-react": "^7.5.1",
    "regenerator-runtime": "^0.11.0"
  },
  "engines": {
    "atom": ">1.21.0"
  },
  "homepage": "https://github.com/appcelerator/atom-appcelerator-titanium#readme",
  "keywords": [
    "axway",
    "appcelerator",
    "titanium",
    "alloy",
    "mobile",
    "javascript",
    "ios",
    "android",
    "windows"
  ],
  "license": "Apache-2.0",
  "main": "./lib/index",
  "name": "appcelerator-titanium",
  "optionalDependencies": {},
  "providedServices": {
    "autocomplete.provider": {
      "versions": {
        "2.0.0": "provideAutoComplete"
      }
    },
    "hyperclick": {
      "versions": {
        "0.1.0": "provideDefinitions"
      }
    }
  },
  "readme": "# Appcelerator Titanium Package for Atom\n\nAppcelerator Titanium build tools and UI for the [Atom text editor](https://atom.io).\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33011945-556d79c6-cdd7-11e7-84a6-78c3a57b6eb1.png\" width=\"900px\" alt=\"Appcelerator Titanium for Atom screenshot\" />\n\n## Getting Started\n\n* Atom 1.21 (or later) is required.\n* Some features are implemented as providers for services in the [Atom IDE](https://ide.atom.io) package. Install `atom-ide-ui` package.\n* Install `appcelerator-titanium` package.\n\n### Using the Atom package manager\n\nPreferences/Settings > Install > Search for `appcelerator-titanium`.\n\n### Using the CLI:\n\n```\napm install appcelerator-titanium\n```\n\n## Open a Titanium project\n\nFile > Open... > Browse to Titanium project\n\nFrom the CLI:\n\n```\natom /path/to/titanium/project\n```\n\n## Features\n\n### Commands\n\nCommand                 | Keymap            | Description\n---                     | ---               | ---\nappc:build              | `ctrl-alt-enter`  | Build using the current selected command and configuration\nappc:stop               | -                 | Stop the current build\nappc:console            | -                 | Toggle the console\nappc:generate           | -                 | Open dialog to generate a new alloy file or component\nappc:open view          | `ctrl-alt-v`      | Open the related Alloy XML file\nappc:open style         | `ctrl-alt-s`      | Open the related Alloy TSS file\nappc:open controller    | `ctrl-alt-x`      | Open the related JavaScript file\nappc:open close related | `ctrl-alt-a`      | Toggle the related Alloy XML, TSS and Javascript files\n\n### Build tools\n\n#### Toolbar\n\nThe toolbar provides a UI to commonly used commands when developing a Titanium application. Further information on each function is provided in the sections below.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33169533-f0e0a89e-d03c-11e7-99f8-7cb91858dbed.png\" width=\"722px\"  alt=\"Toolbar\" />\n\n##### 1. Build select and run\n\nSelect to run on simulator or device, package for ad-hoc or App Store distribution or a custom build option.\n\n##### 2. Platform select\n\nSelect available platforms to build for.\n\n##### 3. Target select\n\nSelect simulator/emulator or local device. When attaching a device, select Refresh Targets option to add it to the target list.\n\n##### 4. Code signing / Android KeyStore configuration \n\nWhen building for device (iOS) or distribution (iOS and Android) the option to configure code signing or keystore credentials is available.\n\n##### 5. Info panel\n\nProvides information about the active project.\n\n##### 6. Generate component\n\nPresents a dialog to generate a Titanium component: Controller, View, Style, Model, Widget or Alloy.jmk file.\n\n##### 7. Console\n\nShow or hide the console which outputs debug information during build and run.\n\n#### Build\n\nThe build select button executes and provides selections of the build command. Depending on the target platform selected, the drop-down will display options for the `appc run` command:\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33169524-ed2b85ca-d03c-11e7-881e-4eb9e301649d.png\" width=\"109px\" alt=\"Build command select\" />\n\n* Run: Build and run the app on selected simulator/emulator or device\n* Ad-Hoc: (iOS only) build and package the app for Ad-Hoc distribution using selected code signing\n* Publish: Build and package the app for distribution through the App Store or Google Play using selected code signing or keystore credentials\n* Custom: Execute `appc run -d <project_dir>` with custom arguments\n\n#### Console\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33169526-ed531cf2-d03c-11e7-8d08-5657f691aca2.png\" width=\"876px\" alt=\"Build command select\" />\n\nThe console displays debug logging during the build and run. The log level is passed to the `appc run` comand so selecting the log level does not alter output from the currently executing command. There are options to automatically scroll the console to the latest message and to open it when a build is initiated. \n\n**By default the executing command is displayed in the console to aid debugging. This can be disabled in the package settings.**\n\n#### iOS code signing\n\nWhen building for a device and ad-hoc or App Store distribution, a certificate and provisioning profile must be selected. Click the code signing / keystore button (#4) to display the code signing options.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33169525-ed3f58a2-d03c-11e7-9b58-48b361328d69.png\" width=\"479px\" alt=\"iOS code signing\" />\n\nCertificates are populated according to the selected build option (developer / distribution). Available provisioning profiles are displayed but only those which match the selected certificate and app ID are enabled.\n\n#### Android KeyStore\n\nWhen building for distribution through Google Play, the app must be signed with a keystore. Click the code signing / keystore button (#4) to display the keystore options.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33169528-ed7b7922-d03c-11e7-9647-cc39256dc94a.png\" width=\"1110px\" alt=\"Android keystore\" />\n\nThe path to the keystore can be entered manually or by using the file picker. Keystore path and alias are stored in package configuration.\n\n### Autocompletion\n\nAutocompletion support is provided to help speed up development by providing quick references to Titanium APIs and Alloy markup as well as references to modules, widgets and assets within your project.\n\n#### Generation\n\nOn initial launch, autocomplete suggestions are generated for the current selected Titanium SDK. You can check and set this using the CLI:\n\n```\n$ appc ti sdk\n\n...\n\nInstalled SDKs:\n   7.0.0.GA [selected]  7.0.0.GA\n```\n\n```\n$ appc ti sdk select\n```\n\nAutocomplete suggestions can be regenerated by selecting the 'Regenerate autocomplete suggestions' option from the package settings and relaunching Atom.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33169527-ed667b9e-d03c-11e7-8a48-9c34f4c8b5e2.png\" width=\"562px\" alt=\"Regenerate autocomplete suggestions option\" />\n\n#### Titanium and Alloy\n\nTitanium APIs and Alloy markup suggestions are provided in Titanium JavaScript and Alloy XML and TSS files. This includes classes, properties, methods and events. Where appropriate additional information is provided with a link to the online documentation. Deprecated properties are also indicated.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33011938-54d3d302-cdd7-11e7-910c-531f51454f74.png\" width=\"385px\" alt=\"Alloy markup class autocomplete\" />\n\n#### Project references\n\nSuggestions for other controllers, modules and widgets are presented when referencing through a Titanium function or Alloy markup.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33011939-54ebd5c4-cdd7-11e7-8cdd-b39a8c8b92d3.png\" width=\"324px\" alt=\"Alloy markup widget reference autocomplete\" />\n\n#### Class and ID references\n\nSuggestions for classes and IDs declared or defined in related Alloy XML and TSS files are presented.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33011940-550697c4-cdd7-11e7-8c56-b6ad9cb400a8.png\" width=\"251px\" alt=\"TSS class reference autocomplete\" />\n\n#### Images\n\nImage suggestions are presented where appropriate, including a thumbnail preview and information about the scaled versions available.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33011941-551aca50-cdd7-11e7-86ec-cae8ea0430ff.png\" width=\"558px\" alt=\"TSS image reference autocomplete\" />\n\n### Alloy file and component generation\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33011944-555909fa-cdd7-11e7-8bc8-0301059b360d.png\" width=\"639px\" alt=\"Alloy file and component generate dialog\" />\n\nA UI for the `alloy generate` command is provided. The Generate File dialog is presented by clicking the + icon in the toolbar or using the command from the menu or palette. Select the type of file or component to generate and provide the required information. The generated file(s) are then opened.\n\n### Open related files\n\nOpening related Alloy files is supported (see above commands list).\n\n* From View, open related Style and/or Controller\n* From Style, open related View and/or Controller\n* From Controller, open related View and/or Style\n\n### Jump-to-definition\n\nJump-to-definition support is provided for quickly accessing the definiion or usage of Alloy markup and to easily generate new definitions. Images can be opened directly from their path.\n\n#### Alloy\n\nFrom Views, click through to style definitions for tags, classes and IDs, in related or global TSS. Click through to event definitions in the related controller.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33011943-554470ee-cdd7-11e7-9e04-1e49272c3f6d.png\" width=\"257px\" alt=\"View tag style definition\" />\n\nA prompt is displayed to generate undefined styles or functions.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/33011942-553025bc-cdd7-11e7-8389-572b2bf811e0.png\" width=\"539px\" alt=\"View tag style generate definition\" />\n\n#### Strings\n\nClick on localised string references to jump to their definition. The option to generate undefined strings is provided.\n\n#### Images\n\nClick on an image path to open the image in a new tab. For iOS, where multiple scaled images exist with the same name the first is opened (e.g. @2x).\n\n### Snippets\n\nCode snippets for common Alloy and Titanium APIs are provided for use in Alloy controllers and modules. A description of the snippet and link to documentation are provided where appropriate. Type the prefix and the autocomplete overlay will be displayed with matching snippets.\n\n<img src=\"https://user-images.githubusercontent.com/2697821/35726837-259fe6be-07fe-11e8-9a73-ea13a8572723.png\" width=\"356px\" alt=\"Code snippet suggestions\" />\n\nPrefix          | Description\n---             | ---\n`tidebug`       | Debug log message\n`tierror`       | Error log message\n`tiinfo`        | Info log message\n`tiwarn`        | Warn log message\n`titrace`       | Trace log message\n`tiaddevent`    | Add event listener\n`tiremevent`    | Remove event listener\n`tifireevent`   | Fire event\n`tialert`       | Show alert dialog\n`tiopt`         | Show option dialog\n`tianim`        | View animation\n`tifile`        | Open file\n`tisound`       | Play sound\n`tiaudio`       | Play local or remote audio\n`tivideo`       | Play local or remove video\n`ticamera`      | Open camera\n`alglo`         | Alloy Globals object\n`alcfg`         | Alloy CFG object\n`alcon`         | Alloy create controller function\n`alcol`         | Alloy create collection function\n`almod`         | Alloy create model function\n`alwid`         | Alloy create widget function\n`ifios`         | iOS conditional statement\n`ifand`         | Android conditional statement\n`ifwin`         | Windows conditional statement\n\n## Contributions\n\nThis package would not be possible without support from the Titanium community. Autocompletion, jump-to-definition and grammar support provided by [Jong Eun Lee](https://github.com/yomybaby) through the [Titanium Alloy package](https://github.com/yomybaby/atom-titanium).\n\n### Additional thanks\n\nWe doff our caps to:\n\n* [Titanium-Build](https://github.com/HazemKhaled/Titanium-Build)\n* [tool-bar](https://github.com/suda/tool-bar)\n* [toolbar-basic](https://github.com/mattlovaglio/toolbar-basic)\n\n## Legal stuff\n\nAppcelerator is a registered trademark of Appcelerator, Inc. Titanium is\na registered trademark of Appcelerator, Inc.  Please see the LEGAL information about using our trademarks,\nprivacy policy, terms of usage and other legal information at [http://www.appcelerator.com/legal](http://www.appcelerator.com/legal).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appcelerator/atom-appcelerator-titanium.git"
  },
  "scripts": {
    "lint": "eslint lib"
  },
  "version": "1.1.1"
}
